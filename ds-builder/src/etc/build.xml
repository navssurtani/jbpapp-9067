<?xml version="1.0"?>
<!-- $Id: build.xml 7831 2011-01-09 20:13:10Z vhalbert@REDHAT.COM $ -->
<project name="EAP Database Configuration Script" default="execute" basedir=".">
    <!-- Read properties from file -->
    <property file="build.properties"/>
    <!-- Set default location -->
    <property name="org.jboss.eap.server.home" location="../.."/>
    <property name="groovy.home" location="../../../seam/lib"/>

    <target name="execute">
        <property name="base.dir" location="${basedir}"/>
        <property name="home.dir" location="${org.jboss.eap.server.home}"/>
        <!-- Use groovy jar from the seam distribution -->
        <path id="groovy.path">
            <fileset id="groovy.jar" dir="${groovy.home}">
                 <include name="groovy-all.jar"/>
            </fileset>
        </path>
        <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="groovy.path"/>
        <groovy>
            <![CDATA[

            // *** Global variables ***
            fs = properties['file.separator'];
            base_dir = properties['base.dir'] + fs;
            server_dir = properties['home.dir'] + fs + "server" + fs;

            // Defaults for questions
            default_profile = "default";
            default_dbname = "EAP";
            default_hostname = "localhost";
            default_db_minpoolsize = 15;
            default_db_maxpoolsize = 50;

            // Default clustering policy
            cluster_list = [
                "all" : "true",
                "default" : "false",
                "minimal" : "false",
                "production" : "true"
            ]

            // Database array indexes
            db_pretty = 0;
            db_input = 1;
            db_target = 2;
            db_timer_fix = 3;
            db_dialect = 4;
            db_port = 5;
            db_juddi_dir = 6;
            db_riftsaw_dir = 7;
            db_sequence_fix = 8;

            // Supported databases:
            //   pretty name, directory name, target file name,
            //   needs timer fix, default hibernate dialect, default port
            //   jUDDI directory name, RiftSaw directory name, sequence fix
            database_list = [
              [ "DB2 9.7", "db2-97", "db2", "true", "DB2Dialect", "446", "db2", "db2.sql", "false" ],
              [ "MS SQL 2008", "mssql2008", "mssql", "false", "SQLServerDialect", "1433", "sqlserver", "sqlserver.sql", "false" ],
              [ "MySQL 5.0", "mysql50", "mysql", "false", "MySQL5InnoDBDialect", "3306", "mysql", "mysql.sql", "false" ],
              [ "MySQL 5.1", "mysql51", "mysql", "false", "MySQL5InnoDBDialect", "3306", "mysql", "mysql.sql", "false" ],
              [ "Oracle 11g", "oracle11g", "oracle", "true", "Oracle10gDialect", "1521", "oracle9", "oracle.sql", "true" ],
              [ "Oracle 11gRAC", "oracle11gRAC", "oracle", "true", "Oracle10gDialect", "1521", "oracle9", "oracle.sql", "true" ],
              [ "PostgreSQL 8.2.x", "postgresql82", "postgresql", "false", "PostgreSQLDialect", "5432", "postgres", "postgres.sql", "true" ],
              [ "PostgreSQL 8.3.x", "postgresql83", "postgresql", "false", "PostgreSQLDialect", "5432", "postgres", "postgres.sql", "true" ],
              [ "PostgreSQL 8.4.x", "postgresql84", "postgresql", "false", "PostgreSQLDialect", "5432", "postgres", "postgres.sql", "true" ],
              [ "PostgreSQL 9.1.x", "postgresql91", "postgresql", "false", "PostgreSQLDialect", "5432", "postgres", "postgres.sql", "true" ],
              [ "Sybase ASE 15", "sybase15", "sybase", "false", "SybaseDialect", "4100", "sybase", "sybase.sql", "false" ]
            ];

// Note no Ingres or Postgresql plus adv as these were self certified by vendors

            // Back up these files under the .../"profile"/deploy/ directory
            backup_list = [
                "ejb2-timer-service.xml",
                "jbosseap-registry.sar" + fs + "juddi_config" + fs + "META-INF" + fs + "persistence.xml",
                "jbosseap-registry.sar" + fs + "juddi-ds.xml",
                "jbosseap.eap" + fs + "jbosseap-service.xml",
                "jbpm.eap" + fs + "hibernate.cfg.xml",
                "jbpm.eap" + fs + "jbpm-service.xml",
                "uuid-key-generator.sar" + fs + "META-INF" + fs + "jboss-service.xml",
                "riftsaw.sar" + fs + "META-INF" + fs + "bpel-ds.xml",
                "riftsaw.sar" + fs + "META-INF" + fs + "jboss-beans.xml",
				"riftsaw.sar" + fs + "bpel.properties",
                "modeshape-eds-store-ds.xml"
            ]
            backup_suffix = ".orig";


            // *** Functions ***

            // Welcome message
            def welcome() {
                printf("JBoss EAP Platform Database Configuration Script\n");
                printf("------------------------------------------------\n");
                printf(" \n");
                printf("This script is used to configure the EAP platform and all its\n");
                printf("constituent components against a new RDBMS.  Deployment scripts\n");
                printf("are currently available for the following databases:\n");
                for (i in 0..< database_list.size()) {
                    if (i) {
                        if (!(i % 4))
                            printf(",\n  ");
                        else
                            printf(", ");
                    } else
                        printf("  ");
                    printf("%s", database_list[i][db_pretty]);
                }
                printf("\n");
                printf("\n");

                printf("** Warnings **\n");
                printf("  This script may not work correctly if you have made manual\n");
                printf("  changes to the database configuration.\n");
                printf("  This script is only intended to do initial configuration.\n");
                printf("  It is not intended to be used multiple times.\n");
                printf("\n");
            }

            // Ask for profile
            def ask_profile() {
                private profile_name = "";
                private show_default = false;
                private f=new File(server_dir);
                private profiles = new ArrayList();

                f.eachDir {
                    profiles.add(it.name);
                    if (it.name == default_profile)
                        show_default = true;
                }
                while (profile_name == "") {
                    printf("Which server configuration are you changing?\n");

                    for (i in 0..< profiles.size()) {
                        if (i) {
                            if (!(i % 4))
                                printf(",\n  ");
                            else
                                printf(", ");
                        } else
                            printf("  ");
                        printf("%s", profiles[i]);
                    }
                    if (show_default)
                        printf(" [%s]", default_profile);
                    printf(":\n");

                    System.in.withReader { profile_name = (it.readLine()) }
                    if (profile_name == "")
                        profile_name = default_profile;
                    if (!profiles.find { it == profile_name }) {
                        printf("** Error: unknown profile: %s\n", profile_name);
                        profile_name = "";
                    }
                }
                return profile_name;
            }

            // Check if clustered or ask
            def check_clustered(profile_name) {
                private input_cl;

                if (cluster_list[profile_name])
                    return cluster_list[profile_name].toBoolean();

                printf("Is the '%s' configuration a clustered configuration? (yes, no, ...) [no]:\n", profile_name);

                System.in.withReader { input_cl = (it.readLine()) }
                if (input_cl.toBoolean() || input_cl.toLowerCase() == "yes")
                    return true;
                return false;
            }

            // Ask for database name
            def ask_database() {
                private user_db = -1;
                private input_db;

                while (user_db < 0) {
                    printf("Please enter the database you wish to configure:\n");

                    for (i in 0..< database_list.size()) {
                        if (i) {
                            if (!(i % 5))
                                printf(",\n  ");
                            else
                                printf(", ");
                        } else
                            printf("  ");
                        printf("%s", database_list[i][db_input]);
                    }
                    printf("\n");

                    System.in.withReader { input_db = (it.readLine()) }
                    for (i in 0..< database_list.size())
                        if (database_list[i][db_input] == input_db)
                            user_db = i;

                    if (user_db < 0)
                        printf("** Error: unknown database: %s\n", input_db);
                }
                return user_db;
            }

            // Copy file
            def copy_file(src_name, dest_name) {
                private src = new File(src_name);
                private dest = new File(dest_name);
                private reader = src.newReader();

                dest.withWriter { writer ->
                    writer << reader;
                }
                reader.close();
            }

            // Copy file to file.orig, if file.orig does not exist
            def backup_file(pathname) {
                private src = new File(pathname);
                if (!src.exists())
                    return;
                private dest = new File(pathname + backup_suffix);

                if (dest.exists())
                    return;

                printf("  %s\n", pathname);
                copy_file(pathname, pathname + backup_suffix);
            }

            // Check property and ask input
            def prop_input(prop_name, message, default_val, empty_ok) {
                private response = "";

                if (properties[prop_name] != null && (properties[prop_name] != "" || empty_ok)) {
                    if (message != null)
                        printf("Read %s:\n  %s\n", message, properties[prop_name]);


                    return properties[prop_name];
                }

                if (message == null)
                    return default_val;

                while (response == "") {
                    printf("Please enter the %s", message);
                    if (default_val != null)
                        printf(" [%s]", default_val);
                    printf(":\n");

                    System.in.withReader { response = (it.readLine()) }
                    if (response == "") {
                        if (default_val != null)
                            return default_val;

                        if (empty_ok)
                            return "";

                        printf("** Error: the %s must be provided\n", message);
                    }
                }
                return response;
            }

            // Delete file if it exists
            def delete_file (pathname) {
                private f = new File(pathname);

                if (!f.exists())
                    return;
                printf("  %s\n", f);
                f.delete();
            }

            // Replace strings input from one file, output to other file
            def replace_strings (oldpath, newpath, search_list, replace_list) {
                private fr;
                private fw;

                printf("  %s\n", newpath);
                fr = new FileReader(oldpath);
                fw = new FileWriter(newpath);
                l = fr.readLines();
                l.each {
                    w = it;
                    for (i = 0; i < search_list.size(); i++) {
                        w = w.replaceAll("${search_list[i]}", "${replace_list[i]}");
                    }
                    fw.write(w + "\n");
                }
                fr.close();
                fw.close();
            }

            // Replace strings in single file (uses temporary file)
            def replace_strings (pathname, search_list, replace_list) {
                private tmppath = pathname + ".tmp";
                private f = new File(pathname);

                f.renameTo(new File(tmppath));
                replace_strings (tmppath, pathname, search_list, replace_list);
                f = new File(tmppath);
                f.delete();
            }


            // *** main() ***
            welcome();

            // Check for profile from properties file
            if (properties['org.jboss.eap.server.config'] != null &&
              properties['org.jboss.eap.server.config'] != "") {
                user_profile = properties['org.jboss.eap.server.config'];
                profile_dir = server_dir + user_profile + fs;
                f = new File(profile_dir);
                if (!f.exists()) {
                    printf("** Fatal: bad profile property:\n");
                    printf("  org.jboss.eap.server.config=%s\n", properties['org.jboss.eap.server.config']);
                    ant.fail("profile directory not found");
                }
            } else {
                user_profile = ask_profile();
                profile_dir = server_dir + user_profile + fs;
            }
            deploy_dir = profile_dir + "deploy" + fs;
            printf("Using profile directory:\n");
            printf("  %s\n", profile_dir);

            // Check for clustered from properties file
            if (properties['org.jboss.eap.server.clustered'] != null &&
              properties['org.jboss.eap.server.clustered'] != "") {
                user_cluster = properties['org.jboss.eap.server.clustered'].toBoolean();
            } else {
                printf("\n");
                user_cluster = check_clustered(user_profile);
            }

            if (user_cluster) {
                printf("Profile is clustered\n\n");
                cluster_prefix = "clustered-"
            } else {
                printf("Profile is not clustered\n\n");
                cluster_prefix = ""
            }

            // Check for database name from properties file
            user_db = -1;
            if (properties['source.dir'] != null &&
              properties['source.dir'] != "") {
                    for (i in 0..< database_list.size())
                        if (database_list[i][db_input] == properties['source.dir'])
                            user_db = i;

                if (user_db == -1) {
                    printf("** Fatal: bad database property:\n");
                    printf("  source.dir=%s\n", properties['source.dir']);
                    ant.fail("database not supported");
                }
            } else {
                // Check for database name by asking
                printf("\n");
                user_db = ask_database();
            }

            // Check for installed database driver
            drv_name = base_dir + fs + database_list[user_db][db_input] + fs + "driver" + fs + "name.properties";
            f = new File(drv_name);
            if (!f.exists()) {
                printf("** Fatal: Unable to read driver name file:\n");
                printf("  %s\n", drv_name);
                ant.fail("database driver name file unreadable");
            }

            driver_props = new Properties();
            f.withInputStream {
                stream -> driver_props.load(stream);
            }
            if (driver_props['db.driver.jar.dir'] != null &&
              driver_props['db.driver.jar.dir'] != "") {
                printf("** Fatal: the database driver property 'db.driver.jar' was not found\n");
                ant.fail("database driver property not found");
            }

            driver_regex = driver_props['db.driver.jar'].replaceAll(/\*/, ".*");
            lib_dir = profile_dir + "lib"
            f = new File(lib_dir);
            File[] flist = f.listFiles();
            db_driver = flist.findAll { it ==~ ".*${driver_regex}" };
            if (db_driver.size() == 0) {
                printf("** Fatal: the database driver:\n");
                printf("    %s\n", driver_props['db.driver.jar']);
                printf("  was not found in directory:\n");
                printf("    %s\n", lib_dir);
                printf("\n");
                printf("  You must install this driver manually, otherwise the EAP server\n");
                printf("  will not run.  Please see the platform documentation for driver\n");
                printf("  installation information.\n");
                ant.fail("database driver not found");
            } else {
                printf("Database driver found for %s:\n", database_list[user_db][db_pretty]);
                printf("  %s\n\n", db_driver[0]);
            }

            // Check for local properties
            cfg_name = base_dir + database_list[user_db][db_input] + fs + "config.properties";
            f = new File(cfg_name);
            config_props = new Properties();
            if (f.exists()) {

                f.withInputStream {
                    stream -> config_props.load(stream);
                }

            }
            if (config_props['hibernate.dialect'] != null &&
              config_props['hibernate.dialect'] != "") {

                user_db_dialect = config_props['hibernate.dialect'];
                printf("Read hibernate dialect:\n");
            } else {
                user_db_dialect = "org.hibernate.dialect." + database_list[user_db][db_dialect];
                printf("Using hibernate dialect:\n");
            }
            printf("  %s\n\n", user_db_dialect);


            // Check for Messaging and HornetQ
            use_messaging = false;
            use_hornetq = false;
            f = new File(deploy_dir + "messaging");
            if (f.exists()) {
                use_messaging = true;
                messaging_dir = deploy_dir + "messaging" + fs;
		backup_list= [
		    backup_list, 
		    "messaging" + fs + "messaging-jboss-beans.xml"
		].flatten();
            }
            f = new File(deploy_dir + "hornetq");
            if (f.exists()) {
                use_hornetq = true;
            }
            if (use_messaging == true && use_hornetq == true)
                    ant.fail("both messaging and HornetQ found");
            if (use_messaging == false && use_hornetq == false) {
                printf("** Warning **\n");
                printf("  neither messaging nor HornetQ found\n");
            }

            // Backup the files that we will modify
            printf("Backing up files:\n");
            backup_list.each {
                backup_file(deploy_dir + it);
            }
            printf("\n");

            // Database details
            user_db_name = prop_input("db.name", "database instance name", default_dbname, false);

	    if (database_list[user_db][db_input] == 'oracle11gRAC' || database_list[user_db][db_input] == 'mysqlc70') {
	      user_db_hostname_array = []
	      user_db_port_array = []

	      // take values from property
	      if (properties['db.hostsports'] != null && properties['db.hostsports']!="") {
	        message = 'hostnames and ports of the DB instances from the property file'
	        printf("Read $message \n")
		hostport_pairs = properties['db.hostsports'].split(';')
		hostport_pairs.each { it ->
		    printf("  $it \n")
		    hostport = it.trim().split(':')
		    user_db_hostname_array.add(hostport[0])
		    user_db_port_array.add(hostport[1])

		}
	      }
	      // take values from console input
	      else {
		i = 0
		empty = false
		termin = ""

		while (true) {
		  input_hostname = prop_input("db.hostsports", "hostname or IP Address of DB instance " + (i+1) + termin, default_hostname, empty)
		  if (input_hostname == "") {
		    break;
		  }
		  user_db_hostname_array[i] = input_hostname
		  user_db_port_array[i++] = prop_input("db.hostsports", "TCP port for DB instance " + (i+1), database_list[user_db][db_port] == "" ? null : database_list[user_db][db_port], false)
		  default_hostname = null
		  empty = true
		  termin = " (<Enter> to finish adding hosts)"
		}
	      }
	    }
	    else {
	      user_db_hostname = prop_input("db.hostname", "hostname or IP Address of the DB instance", default_hostname, false)
	      user_db_port = prop_input("db.port", "TCP port for the DB instance", database_list[user_db][db_port] == "" ? null : database_list[user_db][db_port], false)
	    }

            user_db_username = prop_input("db.username", "DB instance Username", null, false);
            user_db_password = prop_input("db.password", "DB instance Password", null, true);
            user_db_minpoolsize = prop_input("db.minpoolsize", null, default_db_minpoolsize, false);
            user_db_maxpoolsize = prop_input("db.maxpoolsize", null, default_db_maxpoolsize, false);
            printf("\n");

            // Delete HSQLDB files
            printf("Deleting HSQLDB files:\n");
            delete_file(deploy_dir + "hsqldb-ds.xml");
            if (use_messaging == true) {
                delete_file(messaging_dir + "hsqldb-persistence-service.xml");
                delete_file(messaging_dir + "clustered-hsqldb-persistence-service.xml");
            }
            printf("\n");

            // Supporting scripts in "dbname"/sql/ directory
            printf("Configuring supporting scripts\n");
            search_list = [];
            replace_list = [];
	    // for ORACLE RAC and MySQL Cluster, construct DB URL from multiple hostnames and ports
	    if (database_list[user_db][db_input] == 'oracle11gRAC') {
	      user_db_hostname = ""
	       user_db_port = ""
	       (0..< user_db_hostname_array.size()).each { i ->
		user_db_hostname = user_db_hostname + "(ADDRESS=(PROTOCOL=TCP)(HOST=${user_db_hostname_array[i]})(PORT=${user_db_port_array[i]}))"
	      }
	    }
	    if (database_list[user_db][db_input] == 'mysqlc70') {
              j = user_db_hostname_array.size();
	      user_db_hostname = ""
	       user_db_port = ""
	       (0..< user_db_hostname_array.size()).each { i ->
		user_db_hostname = user_db_hostname + "${user_db_hostname_array[i]}:${user_db_port_array[i]}"
		if (i < j - 1)
		    user_db_hostname = user_db_hostname + ","
	      }
	    }
		
	    search_list.add('@JNDINAME@');
            replace_list.add('DefaultDS');	
            search_list.add('@DATABASE_NAME@');
            replace_list.add(user_db_name);
            search_list.add('@HOSTNAME@');
	    replace_list.add(user_db_hostname);
	    search_list.add('@PORT@');
	    replace_list.add(user_db_port);
            search_list.add('@USERNAME@');
            replace_list.add(user_db_username);
            search_list.add('@PASSWORD@');
            replace_list.add(user_db_password);
            search_list.add('@MINPOOLSIZE@');
            replace_list.add(user_db_minpoolsize);
            search_list.add('@MAXPOOLSIZE@');
            replace_list.add(user_db_maxpoolsize);

            sql_dir = base_dir + database_list[user_db][db_input] + fs + "sql";
            f = new File(sql_dir);
            if (!f.exists())
                new File(sql_dir).mkdir();

            f = new File(base_dir + database_list[user_db][db_input] + fs + "template");
            flist = f.listFiles();
            ant_sql = flist.findAll { it ==~ /.*antsql\.xml$/ };
            sql_files = flist.findAll { it ==~ /.*\.sql$/ };

            ant_sql.each {
                copy_file(it.path, sql_dir + fs + it.name);
                replace_strings(sql_dir + fs + it.name, search_list, replace_list);
            }
            sql_files.each {
                copy_file(it.path, sql_dir + fs + it.name);
                replace_strings(sql_dir + fs + it.name, search_list, replace_list);
            }
            printf("\n");

            // Datasources
            filtered_ds = deploy_dir + database_list[user_db][db_target] + "-ds.xml";

            printf("Setting up general datasources:\n");
            src_file = base_dir + database_list[user_db][db_input] + fs + "template" + fs + database_list[user_db][db_target] + "-ds.xml";
            dest_file = filtered_ds;
            replace_strings(src_file, dest_file, search_list, replace_list);
			
			
			// Check for ModeShape
            f = new File(deploy_dir + "modeshape-eds-store-ds.xml");
            if (f.exists()) {
				printf("\nSetting up ModeShape datasource:\n");				
				
				ms_search_list = [ "DefaultDS" ];
				mx_replace_list = [ "ModeShapeEDSRepo" ];
				
				replace_strings(filtered_ds, f, ms_search_list, mx_replace_list);

				cfgfile = deploy_dir + "modeshape-services.jar/modeshape-config.xml";
				bakfile = deploy_dir + "modeshape-services.jar/modeshape-config.bak";
				
				replace_modeshape_dialect(cfgfile, bakfile);
			}			
			
			// Replace the dialect
			def replace_modeshape_dialect (cfgpath, bakpath) {
				// rename the cfg file to the backup
                private f = new File(cfgpath);
                f.renameTo(new File(bakpath));
			
                private fr;
                private fw;

                fr = new FileReader(bakpath);
                fw = new FileWriter(cfgpath);
                l = fr.readLines();
				found_eds_store = false;
                l.each {
                    w = it;
					if (w.contains("mode:source")) {
						if (w.contains("eds-store")) {
							found_eds_store=true;
						}
					}					

					if (w.contains("org.hibernate.dialect.HSQLDialect")) {
						if (found_eds_store == true) {
							w = w.replace("org.hibernate.dialect.HSQLDialect", "${user_db_dialect}");
							// turn off finding eds store so the next source isn't processed
							found_eds_store = false;
							println("Updated ModeShape config HSQLDialect with ${user_db_dialect}\n");
						}
					}

					fw.write(w + "\n");

                }
                fr.close();
                fw.close();
            }

            // XXX: next should probably be done as a replace filter
            src_file = base_dir + database_list[user_db][db_input] + fs + "template" + fs + "uuid-jboss-service.xml";
            f = new File(src_file);
            if (f.exists()) {
                dest_file = deploy_dir + "uuid-key-generator.sar" + fs + "META-INF" + fs + "jboss-service.xml";
                uuid_search_list = [ '@USERNAME@' ];
                uuid_replace_list = [ user_db_username ];
                replace_strings(src_file, dest_file, uuid_search_list, uuid_replace_list);
            }

            if (database_list[user_db][db_timer_fix].toBoolean()) {
                dest_file = deploy_dir + "ejb2-timer-service.xml";
                timers_search_list = [ "name=\"TimersTable\">TIMERS" ];
                timers_replace_list = [ "name=\"TimersTable\">" + user_db_username + ".TIMERS" ];
                replace_strings(dest_file + backup_suffix, dest_file, timers_search_list, timers_replace_list);
            }
            printf("\n");

            if (use_messaging == true) {
                printf("Setting up messaging datasources:\n");
                jms_search_list = [ "DefaultDS" ];
                jms_replace_list = [ "JmsDS" ];
                dest_file = messaging_dir + "messaging-jboss-beans.xml";
                replace_strings(dest_file + backup_suffix, dest_file, jms_search_list, jms_replace_list);
                src_file = base_dir + "common" + fs + cluster_prefix + database_list[user_db][db_target] + "-persistence-service.xml";
                dest_file = messaging_dir + database_list[user_db][db_target] + "-persistence-service.xml";
                replace_strings(src_file, dest_file, jms_search_list, jms_replace_list);
                src_file = base_dir + database_list[user_db][db_input] + fs + "template" + fs + "jbm-" + database_list[user_db][db_target] + "-ds.xml";
                dest_file = messaging_dir + "db-jms-ds.xml";
                f = new File(src_file);
                jms_search_list = [ [ search_list ], "DefaultDS" ].flatten();
                jms_replace_list = [ [ replace_list ], "JmsDS" ].flatten();

                if (f.exists()) {
                    replace_strings(src_file, dest_file, jms_search_list, jms_replace_list);
                } else {
                    replace_strings(filtered_ds, dest_file, jms_search_list, jms_replace_list);
                }
                printf("\n");
            }

            ]]>
        </groovy>
    </target>

</project>
